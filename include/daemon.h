#pragma once

#include "log.h"
#include <cstdint>
#include <ctime>
#include <functional>
namespace zz {
struct ProcessInfo {
  pid_t parent_id = 0;
  pid_t main_id = 0;
  uint64_t parent_start_time = 0;
  uint64_t main_start_time = 0;
  uint32_t restart_count = 0; // 主进程重启的次数

  std::string toString() const;
};

using ProcessInfoMgr = zz::Singleton<ProcessInfo>;

/**
 * @brief 启动程序可以选择用守护进程的方式
 * @param[in] argc 参数个数
 * @param[in] argv 参数值数组
 * @param[in] main_cb 启动函数
 * @param[in] is_daemon 是否守护进程的方式
 * @return 返回程序的执行结果
 */

int start_daemon(int argc, char **argv,
                 std::function<int(int argc, char **argv)> main_cb,
                 bool is_daemon);

} // namespace zz